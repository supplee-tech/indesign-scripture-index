#!/usr/bin/env python3
# pylint: disable=invalid-name

import re
import io
import sys
import csv
from enum import Enum
from copy import deepcopy
from dataclasses import dataclass, field

from jinja2 import Environment, FileSystemLoader
import fire

from bible_lib.languages import ArabicScript
from bible_lib.verses import proper_books_names, VerseReference, VerseReferenceList


COMMA = 'ØŒ '
INDEX_SCRIPREF = 'scripref'


class IndexingMode(Enum):
    SCRIPTURE = 'scripture'
    SUBJECT = 'subject'


def first_char(text: str) -> str:
    return ArabicScript.strip_text(text)[0]


@dataclass
class Pages:
    page_numbers: list[int] = field(default_factory=list)

    def __str__(self) -> str:
        return self.compact()

    def append(self, page: int):
        self.page_numbers.append(page)

    def compact(self) -> str:
        i = 1
        last_page = None
        pages = list(set(deepcopy(self.page_numbers)))
        pages.sort()
        while i < len(pages):
            if not last_page and pages[i-1] == pages[i]-1 or (last_page and last_page == pages[i]-1):
                last_page = pages[i]
                del pages[i]

            else:
                if last_page:
                    pages[i-1] = f'{pages[i-1]}-{last_page}'
                    last_page = None

                pages[i-1] = str(pages[i-1])
                i += 1

        if last_page:
            pages[-1] = f'{pages[-1]}-{last_page}'
        else:
            pages[-1] = str(pages[-1])

        return COMMA.join(pages)


@dataclass
class IndexEntry:
    entry: str
    pages: Pages | int

    def __post_init__(self):
        if isinstance(self.pages, str):
            if self.pages == 'null':
                self.pages = 0
            else:
                # print(f'{self.pages} | {type(self.pages)}', file=sys.stderr)
                self.pages = int(self.pages)

        if isinstance(self.pages, int):
            pages = Pages()
            pages.append(self.pages)
            self.pages = pages


@dataclass
class SubjectIndexEntry(IndexEntry):
    item: str = None
    subitem: str = None
    modifier: str = None

    def __post_init__(self):
        super().__post_init__()

        if self.entry and '|' in self.entry:
            self.item, self.subitem = re.split(r'\s*\|\s*', self.entry)
        else:
            self.item = self.entry
            self.subitem = None

    def key(self) -> str:
        key = self.item.ljust(50, ' ')
        if self.subitem:
            key += '|' + self.subitem.ljust(50, ' ')

        return key

    def entry_text(self) -> str:
        text = self.item
        if self.subitem:
            text += COMMA + ' ' + self.subitem

        return text

    def __str__(self) -> str:
        return f'Entry: {self.entry} | Item: {self.item} | Subitem: {self.subitem} | Modifier: {self.modifier} | Pages: {self.pages}'


@dataclass
class ScriptureIndexEntry(IndexEntry):
    ref: VerseReference
    item: str = None
    subitem: str = None
    modifier: str = None

    def key(self) -> str:
        try:
            key = str(self.ref.book_num()).rjust(3, '0')
            if self.ref.chapter():
                key += ':' + self.ref.chapter().rjust(3, '0')

            if self.ref.verse():
                key += ':' + re.sub(r'^\d+', lambda m: m[0].rjust(3, '0'), self.ref.verse()) if self.ref.verse() else ''

            return key
        except TypeError:
            print(f'{str(self.ref.book_num())} : {self.ref.chapter()} : {self.ref.verse()} | {self.ref._set_ref_text} | {self.pages}', file=sys.stderr)
            return 'zzzzz'

    def entry_text(self) -> str:
        text = ''
        # print(f"{entry.key()} | {entry.ref.text_ar(mime_type='indesign')}\t{entry.pages}", file=f_output)
        if self.ref.chapter():
            text += f"{self.ref.chapter()}"
        if self.ref.chapter() and self.ref.verse():
            text += ":\u200f"
        if self.ref.verse():
            text += f"{self.ref.verse()}"

        return text

    def __str__(self) -> str:
        return f'Entry: {self.ref} | Item: {self.item} | Subitem: {self.subitem} | Modifier: {self.modifier} | Pages: {self.pages}'


@dataclass(kw_only=True)  # pylint: disable=unexpected-keyword-arg
class IndexHeading:
    heading: str
    entries: list[IndexEntry] = field(default_factory=list[IndexEntry])


@dataclass
class ScriptureIndexHeading(IndexHeading):
    book_num: int


@dataclass
class SubjectIndexHeading(IndexHeading):
    pass


class SubjectSubitemHeading(IndexHeading):
    item: str


def process_file(file_path: str, entries: list[ScriptureIndexEntry], mode: IndexingMode):
    try:
        with open(file_path, 'r', newline='', encoding='utf-8') as csvfile:
            reader = csv.DictReader(csvfile)

            if 'page' not in reader.fieldnames:
                print(f"Error: File '{file_path}' does not contain 'page' column.", file=sys.stderr)
                return entries

            if 'entry' not in reader.fieldnames and 'text' not in reader.fieldnames:
                print(f"Error: File '{file_path}' does not contain an 'entry' or 'text' column.", file=sys.stderr)
                return entries

            for row in reader:
                # print(row)
                page = row['page'].strip()

                # scripture index
                if 'text' in reader.fieldnames:
                    scripref = row['text'].strip()
                    for vr in VerseReferenceList(text=scripref):
                        entries.append(ScriptureIndexEntry(ref=vr, pages=page, entry=scripref))

                # subject index
                elif 'entry' in reader.fieldnames:
                    entry = SubjectIndexEntry(entry=row['entry'].strip(), pages=page)
                    if mode == IndexingMode.SCRIPTURE:
                        # if indexing scripture only process scripture references in a subject index
                        if entry.item.lower() == INDEX_SCRIPREF:
                            for vr in VerseReferenceList(text=entry.subitem):
                                entries.append(ScriptureIndexEntry(ref=vr, pages=page, entry=row['entry']))

                    elif entry.item.lower() != INDEX_SCRIPREF:
                        entries.append(entry)

            return entries

    except FileNotFoundError:
        print(f"Error: File '{file_path}' not found.", file=sys.stderr)

    except csv.Error as e:
        print(f"Error reading CSV file '{file_path}': {e}", file=sys.stderr)

    return entries


def cmd(
    *csv_files: list[str],
    mode: IndexingMode,
    verbose: bool = False,
    output: str = None
):
    mode = IndexingMode(mode)
    print('Mode:', mode, file=sys.stderr)
    if output:
        f_output = open(output, mode='w', encoding='utf-16')
    else:
        # Redirect stdout to a UTF-16 encoded stream
        sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-16')
        f_output = sys.stdout

    entries: list[ScriptureIndexEntry] = []

    for csv_file in csv_files:
        entries = process_file(csv_file, entries=entries, mode=mode)

    entries.sort(key=lambda e: ArabicScript.strip_text(e.key()))

    # for entry in entries:
    #     print(entry.key(), '|', entry.entry, '|', entry.ref.text_ar(), file=f_output)

    i = 1
    while i < len(entries):
        if entries[i-1].key() == entries[i].key():
            for page in entries[i].pages.page_numbers:
                entries[i-1].pages.append(page)
            del entries[i]
        else:
            i += 1

    last_heading: IndexHeading = None
    headings: list[IndexHeading] = []

    if mode == IndexingMode.SCRIPTURE:
        # print(entries, file=sys.stderr)
        for entry in entries:
            if not last_heading or entry.ref.book_num() != last_heading.book_num:
                last_heading = ScriptureIndexHeading(book_num=entry.ref.book_num(), heading=proper_books_names(entry.ref.book_num(), lang_code='ar'))
                headings.append(last_heading)

            last_heading.entries.append(entry)

        template_file = 'templates/scripture-index.att'

    else:
        last_subheading: SubjectSubitemHeading = None
        for entry in entries:
            if not last_heading or first_char(entry.item) != last_heading.heading:
                last_heading = SubjectIndexHeading(heading=first_char(entry.item))
                headings.append(last_heading)

            if entry.subitem:
                if not last_subheading or last_subheading.item != entry.item:
                    last_subheading = SubjectSubitemHeading(heading=entry.item)
                    headings.append(last_subheading)

                last_subheading.entries.append(entry)

            else:
                last_heading.entries.append(entry)
                last_subheading = None

        template_file = 'templates/subject-index.att'

    # Set up Jinja2 environment
    env = Environment(loader=FileSystemLoader('.'))
    template = env.get_template(template_file)

    # Render the template
    f_output.write(template.render(headings=headings))


if __name__ == "__main__":
    fire.Fire(cmd)
